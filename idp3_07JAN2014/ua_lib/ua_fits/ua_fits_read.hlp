;*NAME:;	UA_FITS_READ;*PURPOSE:;	To read a FITS file.;;*CATEGORY:;	INPUT/OUTPUT;;*CALLING SEQUENCE:;	UA_FITS_READ, filename_or_fcb, data [,header, group_par];;*INPUTS:;	FILENAME_OR_FCB - this parameter can be the FITS Control Block (FCB);		returned by UA_FITS_OPEN or the file name of the FITS file.  If;		a file name is supplied, UA_FITS_READ will open the file with;		UA_FITS_OPEN and close the file with UA_FITS_CLOSE before exiting.;		When multiple extensions are to be read from the file, it is;		more efficient for the user to call UA_FITS_OPEN and leave the;		file open until all extensions are read.;;*OUTPUTS:;	DATA - data array.  If /NOSCALE is specified, BSCALE and BZERO;		(if present in the header) will not be used to scale the data.;		If Keywords FIRST and LAST are used to read a portion of the;		data or the heap portion of an extension, no scaling is done;		and data is returned as a 1-D vector. The user can use the IDL;		function REFORM to convert the data to the correct dimensions;		if desired.  If /DATA_ONLY is specified, no scaling is done.;	HEADER - FITS Header.  If an extension is read, and the /NO_PDU keyword;		parameter is not supplied, the primary data unit header;		and the extension header will be combined.  The header will have;		the form:;;			<required keywords for the extension: XTENSION, BITPIX,;				NAXIS, ...>;			BEGIN MAIN HEADER --------------------------------;			<PDU header keyword and history less required keywords:;				SIMPLE, BITPIX, NAXIS, ...>;			BEGIN EXTENSION HEADER ---------------------------;			<extension header less required keywords that were;				placed at the beginning of the header.;			END;		;		The structure of the header is such that if a keyword is;		duplicated in both the PDU and extension headers, routine;		SXPAR will print a warning and return the extension value of;		the keyword. SXADDPAR and SXADDHIST will add new keywords and;		history to the extension portion of the header unless the;		parameter /PDU is supplied in the calling sequence.;;	GROUP_PAR - Group parameter block for FITS random groups format files;		Any scale factors in the header (PSCALn and PZEROn) are not;		applied to the group parameters.;;*KEYWORD PARAMETERS:;;	/NOSCALE: Set to return the FITS data without applying the scale;		factors BZERO and BSCALE.;	/HEADER_ONLY: set to read the header only.;	/DATA_ONLY: set to read the data only.  If set, if any scale factors;		are present (BSCALE or BZERO), they will not be applied.;	/NO_PDU: Set to not add the primary data unit header keywords to the;		output header.;       /NO_ABORT: Set to return to calling program instead of a RETALL;               when an I/O error is encountered.  If set, the routine will;               return with !err=-1 and a message in the keyword MESSAGE.;               If not set, UA_FITS_READ will print the message and issue a;               RETALL;       /NOEXTEND: Don't fiddle with the 'EXTEND' keyword, don't add it where;		it wasn't, don't delete it where it is.  Don't touch it.;       MESSAGE = value: Output error message;	EXTEN_NO - extension number to read.  If not set, the next extension;		in the file is read.  Set to 0 to read the primary data unit.;	XTENSION - string name of the xtension to read;	EXTNAME - string name of the extname to read;	EXTVER - integer version number to read;	EXTLEVEL - integer extension level to read;	FIRST - set this keyword to only read a portion of the data.  It gives;		the first word of the data to read;	LAST - set this keyword to only read a portion of the data.  It gives;               the last word number of the data to read;	GROUP - group number to read for GCOUNT>1.  (Default=0, the first group);	NaNvalue - On non-IEEE floating point machines, it gives the value;		to place into words with IEEE NaN.;	ENUM - Output extensiont number that was read.  ;	;*NOTES:;	Determination or which extension to read.;		case 1: EXTEN_NO specified. EXTEN_NO will give the number of the;			extension to read.  The primary data unit is refered;			to as extension 0. If EXTEN_NO is specified, XTENSION,;			EXTNAME, EXTVER, and EXTLEVEL parameters are ignored.;		case 2: if EXTEN_NO is not specified, the first extension;			with the specified XTENSION, EXTNAME, EXTVER, and;			EXTLEVEL will be read.  If any of the 4 parameters;			are not specified, they will not be used in the search.;			Setting EXTLEVEL=0, EXTVER=0, EXTNAME='', or;			XTENSION='' is the same as not supplying them.;		case 3: if none of the keyword parameters, EXTEN_NO, XTENSION,;			EXTNAME, EXTVER, or EXTLEVEL are supplied.  UA_FITS_READ;			will read the next extension in the file.  If the;			primary data unit (PDU), extension 0, is null, the;			first call to UA_FITS_READ will read the first extension;			of the file.;;		The only way to read a null PDU is to use EXTEN_NO = 0.;;	If FIRST and LAST are specified, the data is returned without applying;	any scale factors (BSCALE and BZERO) and the data is returned in a;	1-D vector.  This will allow you to read any portion of a multiple;	dimension data set.  Once returned, the IDL function REFORM can be;	used to place the correct dimensions on the data.;;	IMPLICIT IMAGES: UA_FITS_READ will construct an implicit image;		for cases where NAXIS=0 and the NPIX1, NPIX2, and PIXVALUE;		keywords are present.  The output image will be:;			image = replicate(PIXVALUE,NPIX1,NPIX2);;*EXAMPLES:;	Read the primary data unit of a FITS file, if it is null read the;	first extension:;		UA_FITS_READ, 'myfile.fits', data, header;;	Read the first two extensions of a FITS file and the extension with;	EXTNAME = 'FLUX' and EXTVER = 4;		UA_FITS_OPEN, 'myfile.fits', fcb;		UA_FITS_READ, fcb,data1, header2, exten_no = 1;		UA_FITS_READ, fcb,data1, header2, exten_no = 2;		UA_FITS_READ, fcb,data3, header3, extname='flux', extver=4;		UA_FITS_CLOSE, fcb;	;	Read the sixth image in a data cube for the fourth extension.;;		UA_FITS_OPEN, 'myfile.fits', fcb;		image_number = 6;		ns = fcb.axis(0,4);		nl = fcb.axis(1,4);		i1 = (ns*nl)*(image_number-1);		i2 = i2 + ns*nl-1;		UA_FITS_READ,fcb,image,header,first=i1,last=i2;		image = reform(image,ns,nl,/overwrite);		UA_FITS_CLOSE;;*HISTORY:;	Written by:	D. Lindler, August 1995